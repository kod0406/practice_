<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Extension/components/chatbot/chatbot-module.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Extension/components/chatbot/chatbot-module.js" />
              <option name="updatedContent" value="/**&#10; * 독립적인 챗봇 모듈&#10; * 어떤 HTML 페이지에서도 사용 가능한 범용 챗봇&#10; */&#10;&#10;class ChatbotModule {&#10;    constructor(options = {}) {&#10;        this.options = {&#10;            apiKey: options.apiKey || null,&#10;            container: options.container || 'chatbot-container',&#10;            layoutPath: options.layoutPath || 'components/chatbot/chatbot_layout.html',&#10;            autoInit: options.autoInit !== false,&#10;            position: options.position || 'bottom-left', // bottom-left, bottom-right, etc.&#10;            ...options&#10;        };&#10;        &#10;        this.isInitialized = false;&#10;        this.chatHistory = [];&#10;        this.userData = {&#10;            message: null,&#10;            file: { data: null, mimeType: null }&#10;        };&#10;&#10;        if (this.options.autoInit) {&#10;            this.init();&#10;        }&#10;    }&#10;&#10;    async init() {&#10;        if (this.isInitialized) return;&#10;        &#10;        try {&#10;            await this.loadLayout();&#10;            this.initializeEventListeners();&#10;            this.isInitialized = true;&#10;            console.log('Chatbot Module initialized successfully');&#10;        } catch (error) {&#10;            console.error('Failed to initialize chatbot:', error);&#10;        }&#10;    }&#10;&#10;    async loadLayout() {&#10;        const container = document.getElementById(this.options.container) || document.body;&#10;        &#10;        try {&#10;            // Chrome Extension 환경 체크&#10;            const isExtension = typeof chrome !== 'undefined' &amp;&amp; chrome.runtime &amp;&amp; chrome.runtime.getURL;&#10;            const url = isExtension &#10;                ? chrome.runtime.getURL(this.options.layoutPath)&#10;                : this.options.layoutPath;&#10;            &#10;            const response = await fetch(url);&#10;            if (!response.ok) throw new Error('Failed to load chatbot layout');&#10;            &#10;            const html = await response.text();&#10;            const wrapper = document.createElement('div');&#10;            wrapper.innerHTML = html;&#10;            &#10;            // 위치 설정&#10;            this.setPosition(wrapper, this.options.position);&#10;            &#10;            container.appendChild(wrapper);&#10;            return true;&#10;        } catch (error) {&#10;            console.warn('Failed to load chatbot layout:', error);&#10;            // 폴백: 기본 HTML 구조 생성&#10;            this.createFallbackLayout(container);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    setPosition(element, position) {&#10;        const chatbotToggle = element.querySelector('#chatbot-toggle');&#10;        const chatbotPopup = element.querySelector('.chatbot-popup');&#10;        &#10;        if (!chatbotToggle || !chatbotPopup) return;&#10;&#10;        const positions = {&#10;            'bottom-left': { bottom: '30px', left: '35px' },&#10;            'bottom-right': { bottom: '30px', right: '35px' },&#10;            'top-left': { top: '30px', left: '35px' },&#10;            'top-right': { top: '30px', right: '35px' }&#10;        };&#10;&#10;        const pos = positions[position] || positions['bottom-left'];&#10;        Object.assign(chatbotToggle.style, pos);&#10;        &#10;        // 팝업 위치도 조정&#10;        const popupPos = { ...pos };&#10;        if (position.includes('bottom')) {&#10;            popupPos.bottom = '90px';&#10;        } else {&#10;            popupPos.top = '90px';&#10;        }&#10;        Object.assign(chatbotPopup.style, popupPos);&#10;    }&#10;&#10;    createFallbackLayout(container) {&#10;        const fallbackHtml = `&#10;            &lt;button id=&quot;chatbot-toggle&quot; style=&quot;position: fixed; bottom: 30px; left: 35px; z-index: 9999; width: 50px; height: 50px; border-radius: 50%; background: #5350C4; border: none; color: white; cursor: pointer;&quot;&gt;&#10;                &#10;            &lt;/button&gt;&#10;            &lt;div class=&quot;chatbot-popup&quot; style=&quot;position: fixed; left: 35px; bottom: 90px; width: 420px; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: none; z-index: 9998;&quot;&gt;&#10;                &lt;div class=&quot;chat-header&quot; style=&quot;background: #5350C4; color: white; padding: 15px; display: flex; justify-content: space-between; align-items: center;&quot;&gt;&#10;                    &lt;h3 style=&quot;margin: 0;&quot;&gt;Chatbot&lt;/h3&gt;&#10;                    &lt;button id=&quot;close-chatbot&quot; style=&quot;background: none; border: none; color: white; cursor: pointer; font-size: 24px;&quot;&gt;&amp;times;&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;chat-body&quot; style=&quot;height: 300px; padding: 20px; overflow-y: auto;&quot;&gt;&#10;                    &lt;div class=&quot;message bot-message&quot;&gt;&#10;                        &lt;div class=&quot;message-text&quot; style=&quot;background: #f2f2ff; padding: 12px; border-radius: 12px; margin-bottom: 10px;&quot;&gt;&#10;                            안녕하세요! 챗봇입니다. API 키를 설정해주세요.&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;chat-footer&quot; style=&quot;padding: 15px; border-top: 1px solid #eee;&quot;&gt;&#10;                    &lt;div class=&quot;chat-form&quot; style=&quot;display: flex; gap: 10px; align-items: center; border: 1px solid #ddd; border-radius: 25px; padding: 8px 12px;&quot;&gt;&#10;                        &lt;textarea class=&quot;message-input&quot; placeholder=&quot;메시지를 입력하세요...&quot; style=&quot;flex: 1; border: none; outline: none; resize: none; min-height: 20px; font-family: inherit;&quot;&gt;&lt;/textarea&gt;&#10;                        &lt;button id=&quot;send-message&quot; style=&quot;background: #5350C4; color: white; border: none; border-radius: 50%; width: 35px; height: 35px; cursor: pointer;&quot;&gt;➤&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        `;&#10;        &#10;        const wrapper = document.createElement('div');&#10;        wrapper.innerHTML = fallbackHtml;&#10;        container.appendChild(wrapper);&#10;    }&#10;&#10;    initializeEventListeners() {&#10;        const chatbotToggle = document.querySelector('#chatbot-toggle');&#10;        const closeChatbot = document.querySelector('#close-chatbot');&#10;        const sendButton = document.querySelector('#send-message');&#10;        const messageInput = document.querySelector('.message-input');&#10;        const chatbotPopup = document.querySelector('.chatbot-popup');&#10;&#10;        if (chatbotToggle) {&#10;            chatbotToggle.addEventListener('click', () =&gt; {&#10;                if (chatbotPopup) {&#10;                    const isVisible = chatbotPopup.style.display !== 'none';&#10;                    chatbotPopup.style.display = isVisible ? 'none' : 'block';&#10;                }&#10;            });&#10;        }&#10;&#10;        if (closeChatbot) {&#10;            closeChatbot.addEventListener('click', () =&gt; {&#10;                if (chatbotPopup) {&#10;                    chatbotPopup.style.display = 'none';&#10;                }&#10;            });&#10;        }&#10;&#10;        if (sendButton &amp;&amp; messageInput) {&#10;            const handleSend = () =&gt; this.sendMessage();&#10;            &#10;            sendButton.addEventListener('click', handleSend);&#10;            messageInput.addEventListener('keypress', (e) =&gt; {&#10;                if (e.key === 'Enter' &amp;&amp; !e.shiftKey) {&#10;                    e.preventDefault();&#10;                    handleSend();&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    async sendMessage() {&#10;        const messageInput = document.querySelector('.message-input');&#10;        const chatBody = document.querySelector('.chat-body');&#10;        &#10;        if (!messageInput || !chatBody) return;&#10;        &#10;        const message = messageInput.value.trim();&#10;        if (!message) return;&#10;        &#10;        // 사용자 메시지 추가&#10;        this.addMessage(message, 'user');&#10;        messageInput.value = '';&#10;        &#10;        // 봇 응답 처리&#10;        this.addMessage('생각중...', 'bot', true);&#10;        &#10;        try {&#10;            const response = await this.callAPI(message);&#10;            this.updateLastBotMessage(response);&#10;        } catch (error) {&#10;            this.updateLastBotMessage('죄송합니다. 오류가 발생했습니다: ' + error.message);&#10;        }&#10;    }&#10;&#10;    addMessage(content, type, isThinking = false) {&#10;        const chatBody = document.querySelector('.chat-body');&#10;        if (!chatBody) return;&#10;        &#10;        const messageDiv = document.createElement('div');&#10;        messageDiv.className = `message ${type}-message`;&#10;        &#10;        const messageText = document.createElement('div');&#10;        messageText.className = 'message-text';&#10;        messageText.style.cssText = type === 'user' &#10;            ? 'background: #5350C4; color: white; padding: 12px; border-radius: 12px; margin-bottom: 10px; margin-left: auto; max-width: 80%; text-align: right;'&#10;            : 'background: #f2f2ff; padding: 12px; border-radius: 12px; margin-bottom: 10px; max-width: 80%;';&#10;        &#10;        messageText.textContent = content;&#10;        if (isThinking) messageText.classList.add('thinking');&#10;        &#10;        messageDiv.appendChild(messageText);&#10;        chatBody.appendChild(messageDiv);&#10;        chatBody.scrollTop = chatBody.scrollHeight;&#10;    }&#10;&#10;    updateLastBotMessage(content) {&#10;        const messages = document.querySelectorAll('.bot-message .message-text');&#10;        const lastMessage = messages[messages.length - 1];&#10;        if (lastMessage) {&#10;            lastMessage.textContent = content;&#10;            lastMessage.classList.remove('thinking');&#10;        }&#10;    }&#10;&#10;    async callAPI(message) {&#10;        if (!this.options.apiKey) {&#10;            return 'API 키가 설정되지 않았습니다. 챗봇 생성 시 apiKey 옵션을 제공해주세요.';&#10;        }&#10;&#10;        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${this.options.apiKey}`;&#10;        &#10;        this.chatHistory.push({&#10;            role: 'user',&#10;            parts: [{ text: message }]&#10;        });&#10;&#10;        const response = await fetch(API_URL, {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({ contents: this.chatHistory })&#10;        });&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`API 호출 실패: ${response.status}`);&#10;        }&#10;&#10;        const data = await response.json();&#10;        const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || '응답을 받지 못했습니다.';&#10;        &#10;        this.chatHistory.push({&#10;            role: 'model',&#10;            parts: [{ text: botResponse }]&#10;        });&#10;&#10;        return botResponse;&#10;    }&#10;&#10;    // 공개 메서드들&#10;    setApiKey(apiKey) {&#10;        this.options.apiKey = apiKey;&#10;    }&#10;&#10;    show() {&#10;        const popup = document.querySelector('.chatbot-popup');&#10;        if (popup) popup.style.display = 'block';&#10;    }&#10;&#10;    hide() {&#10;        const popup = document.querySelector('.chatbot-popup');&#10;        if (popup) popup.style.display = 'none';&#10;    }&#10;&#10;    destroy() {&#10;        const container = document.getElementById(this.options.container);&#10;        if (container) container.innerHTML = '';&#10;        this.isInitialized = false;&#10;    }&#10;}&#10;&#10;// 전역으로 사용 가능하게 만들기&#10;window.ChatbotModule = ChatbotModule;&#10;&#10;// 자동 초기화 (옵션)&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    // data-chatbot 속성을 가진 요소가 있으면 자동 초기화&#10;    const autoInitElements = document.querySelectorAll('[data-chatbot]');&#10;    autoInitElements.forEach(element =&gt; {&#10;        const options = {};&#10;        &#10;        // data 속성들을 옵션으로 변환&#10;        if (element.dataset.apiKey) options.apiKey = element.dataset.apiKey;&#10;        if (element.dataset.position) options.position = element.dataset.position;&#10;        &#10;        new ChatbotModule({&#10;            ...options,&#10;            container: element.id || 'chatbot-container'&#10;        });&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Extension/data.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Extension/data.json" />
              <option name="originalContent" value="{&#10;  &quot;imagePaths&quot;: [&#10;    &quot;assets/images/1.png&quot;,&#10;    &quot;assets/images/2.png&quot;,&#10;    &quot;assets/images/3.png&quot;,&#10;    &quot;assets/images/4.png&quot;&#10;  ],&#10;  &quot;messages&quot;: [&#10;    &quot;지금은 알려줄수 없다.&quot;,&#10;    &quot;그런건가...&quot;,&#10;    &quot;이 이야기는 그만하도록 하지.&quot;,&#10;    &quot;그것도 모르나?&quot;,&#10;    &quot;네가 알 필요는 없다.&quot;&#10;  ]&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;imagePaths&quot;: [&#10;    &quot;assets/images/1.png&quot;,&#10;    &quot;assets/images/2.png&quot;,&#10;    &quot;assets/images/3.png&quot;,&#10;    &quot;assets/images/4.png&quot;&#10;  ],&#10;  &quot;messages&quot;: [&#10;    &quot;지금은 알려줄수 없다.&quot;,&#10;    &quot;그런건가...&quot;,&#10;    &quot;이 이야기는 그만하도록 하지.&quot;,&#10;    &quot;그것도 모르나?&quot;,&#10;    &quot;네가 알 필요는 없다.&quot;&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>